(:= fs (require "fs"))
(:= _  (require "./utils.js"))

(:= toStr (. {} toString))
(:= obArr "[object Array]")


; stackMutator :: expr, stack -> _ (mutates stack)
(:= (defaultAlter expr stack)
    (:= lower (. stack 0))
    (if (=== (toStr.call lower) obArr)
        (lower.push expr)
        (. (val lower) (push expr))))

(:= (involve expr stack)
    (try e (, (= expr (stack.take))
              (defaultAlter expr stack))
         (throw (new Error (+ "Parse error: " (JSON.stringify stack))))))

(:= (deeper expr stack)
    (stack.put expr))


; matchers :: [[str expressor stackMutator]]
(:= matchers [
    ["comment" 
     (-> (str) (if (=== (. str [0]) ";")
                   (, (:= res "")
                      (:= rest (. str [0 1]))
                      (for ((in r rest))
                           (:= c (. rest [r]))
                           (if (=== c "\n")  break (+= res c)))
                      [{c res} (+ res.length 2)])))]
    ["string"
     (-> (str) (if (=== (. str 0) "\"")
                   (, (:= res "")
                      (:= rest (. str [0 1]))
                      (for ((in r rest))
                           (:= c (. rest [r]))
                           (if (&& (=== c "\"") (!== (. rest [(- r 1)]) "\\"))
                               break
                               (+= res c)))
                      [{s res} (+ res.length 2)])))]
])
