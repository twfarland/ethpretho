#lang racket

(define-syntax swap
  (syntax-rules ()
    ((swap x y) ((位 (tmp)
                   (set! x y)
                   (set! y tmp)) 
                 
                 x))))

((位 (tmp other)
   (swap tmp other)
   (list tmp other)) 
 
 5 6)

((位 (tmp other)

  ((位 (tmp_)
         (set! tmp other)
         (set! other tmp_)) tmp)
  (list tmp other))
  5 6)

(define-syntax-rule (x y ...) (list y ...))

(expand (f ... (... n) g)
        (k (2 3) (4) 5)
        [(g f ... (... n))])

(match  (atom f)               ; match one atom
        (f ... (... n) g)      ; f found in patt
        (k (2 3) (4) 5)        ; atom in source
        [(g f ... (... n))])   ; f found in template

(expand (... (... n) g)
        ((2 3) (4) 5)
        [(g) {sub [f k]} (... (... n))])

(match (sequ (expr (sequ (atom n)))) 
       (g)                     
       ((2 3) (4) 5)
       [(g) {sub [f k]} (... (... n))])






