(. x y z)
x.y.z

(. x y (z 0))

x.y.z(0)

(. x [y] z)
x[y].z

(. x (y) z)
x.y().z

(. x [0] y)
(. x 0 y)
x[0].y

(. x (y 1) (z 2))
x.y(1).z(2)

(. x (0 1) (y 2))
(. x ([0] 1) (y 2))
x[0](1).y(2)


(. x [0 1] (y 2))
x.slice(0,1).y(2)

(. x (y 0) z [a])
x.y(0).z[a]

(. x [(y z)])
x[y(z)]

(. x [y]) ; any [] 1 long will be a []
x[y]

(. x [y z]) ; any [] 2 long will be a slice
x.slice(y,z)

(. x "wat" "up") ; any string will be in brackets
x["wat"]["up"]

; make even assignment return something


(:= globals (. (forof window (name) name) [0 10]))


(. ($ "div")
   (append ($ "p"))
   (on "click" (-> (e) (alert ($ this)))))


(:= root this)

(:= toString (. {} toString))

(:= isArray (|| (. Array isArray) 
                (-> (elem) (=== (. toString call elem) "[object Array]"))))

(:= (isObject x) (=== (toString.call x) "[object Object]"))

(:= (Don)
  
  (:= (inner arr)
    (:= res "")
    (:= e)
    (for ((in e arr)) 
      (:= elem (. arr (e))) 
      (+= res (if (isArray elem) (toHtml elem) elem)))
    res)
  
  (:= (attrs obj)
    (:= res "")
    (:= k)
    (for ((in k obj)) 
      (:= val (. obj (k))) 
      (+= res (+ " " k "=\"" val "\"")))
    res)
  
  (:= (toHtml arr)
    
    (if (=== arr.length 0)   ""
        
        (isArray (. arr 0))  (, (:= res "")
                                (:= e)
                                (for ((in e arr)) (+= res (toHtml (. arr (e)))))
                                res)
        
        (=== arr.length 1)   (+ "<" (. arr 0) ">")
        
        (isObject (. arr 1)) (if (=== arr.length 2) 
                                 (+ "<" (. arr 0) (attrs (. arr 1)) ">")
                                 (+ "<" (. arr 0) (attrs (. arr 1)) ">" (inner (. arr 0 2)) "</" (. arr 0) ">"))
        
        (+ "<" (. arr 0) (inner (. arr 0 1)) "</" (. arr 0) ">")))
  
  (= this.toHtml toHtml)
  
  (= (this.render data template key) (toHtml (template data key)))
  
  this)

(= root.Don (new (Don)))